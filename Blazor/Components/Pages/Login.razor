@page "/login"
@using Blazor.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" id="UserName" class="form-control" placeholder="User Name"/>
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" id="Password" type="password" class="form-control" placeholder="Password"/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>



@code {

    private class Model
    {
        public string UserName { get; set; }   
        public string Password { get; set; }   
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            Console.WriteLine("Invalid username");
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
        
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.UserName,
            Role = userAccount.Role
        });
        navManager.NavigateTo("/");
    }
}





















